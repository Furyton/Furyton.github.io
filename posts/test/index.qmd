---
title: "Quarto Basics"
author: "Shiguang WU"
date: 2023-01-05
categories: [hello world, test]
draft: false
---

## code chunk and cross reference

For a demonstration of a line plot on a polar axis, see @fig-polar. and @sec-two. and @eq-einstein.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## equations and callouts {#sec-two}

nothing

Einstein's theory of special relatively that expresses the equivalence of mass and energy:

$$
E = mc^{2}
$$ {#eq-einstein}

::: {.callout-note}
## my note
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::

::: {.callout-tip}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::

::: {.callout-warning}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::

::: {.callout-caution}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::

::: {.callout-important}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::

## cite at the margin

Colorbars indicate the quantitative extent of image data.
Placing in a figure is non-trivial because room needs to
be made for them.
The simplest case is just attaching a 
colorbar to each axes:^[See the [Matplotlib Gallery](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/colorbar_placement.html) to explore colorbars further].

Colorbars indicate the quantitative extent of image data.
Placing in a figure is non-trivial because room needs to

```{python}
#| code-fold: true
#| column: screen-inset
import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(2, 2)
fig.set_size_inches(20, 8)
cmaps = ['RdBu_r', 'viridis']
for col in range(2):
    for row in range(2):
        ax = axs[row, col]
        pcm = ax.pcolormesh(
          np.random.random((20, 20)) * (col + 1),
          cmap=cmaps[col]
        )
        fig.colorbar(pcm, ax=ax)
plt.show()
```

